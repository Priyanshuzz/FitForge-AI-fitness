#!/usr/bin/env node

/**
 * FitForge AI Setup Helper
 *
 * This script helps users set up their environment variables quickly
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const colors = {
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function main() {
  log('\n🚀 FitForge AI Setup Helper', 'bold');
  log('==============================\n', 'blue');

  const envPath = path.join(process.cwd(), '.env.local');
  const envExamplePath = path.join(process.cwd(), '.env.local.example');

  // Check if .env.local already exists
  if (fs.existsSync(envPath)) {
    log('✅ .env.local file already exists!', 'green');
    const overwrite = await question('Do you want to overwrite it? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      log('Setup cancelled. Your existing .env.local is preserved.', 'yellow');
      rl.close();
      return;
    }
  }

  log('This setup will help you configure your environment variables.\n');
  log(
    'You can skip any step by pressing Enter (will use default/placeholder)\n',
    'yellow'
  );

  // Collect environment variables
  const config = {
    NEXT_PUBLIC_SUPABASE_URL: '',
    NEXT_PUBLIC_SUPABASE_ANON_KEY: '',
    OPENAI_API_KEY: '',
    NEXT_PUBLIC_APP_URL: 'http://localhost:3000',
    NODE_ENV: 'development',
  };

  // Supabase Configuration
  log('📦 SUPABASE CONFIGURATION', 'blue');
  log('Get these from: https://supabase.com → Your Project → Settings → API\n');

  config.NEXT_PUBLIC_SUPABASE_URL = await question(
    'Supabase Project URL (or press Enter to skip): '
  );
  if (!config.NEXT_PUBLIC_SUPABASE_URL) {
    config.NEXT_PUBLIC_SUPABASE_URL = 'your_supabase_project_url';
  }

  config.NEXT_PUBLIC_SUPABASE_ANON_KEY = await question(
    'Supabase Anon Key (or press Enter to skip): '
  );
  if (!config.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    config.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'your_supabase_anon_key';
  }

  // OpenAI Configuration
  log('\n🧠 OPENAI CONFIGURATION', 'blue');
  log('Get this from: https://platform.openai.com → API Keys\n');

  config.OPENAI_API_KEY = await question(
    'OpenAI API Key (or press Enter to skip): '
  );
  if (!config.OPENAI_API_KEY) {
    config.OPENAI_API_KEY = 'your_openai_api_key';
  }

  // App Configuration
  log('\n⚙️  APP CONFIGURATION', 'blue');
  const appUrl = await question(
    `App URL (default: ${config.NEXT_PUBLIC_APP_URL}): `
  );
  if (appUrl) {
    config.NEXT_PUBLIC_APP_URL = appUrl;
  }

  // Generate .env.local content
  const envContent = `# FitForge AI Environment Variables
# Generated by setup script on ${new Date().toISOString()}

# Supabase Configuration (Required for database and authentication)
NEXT_PUBLIC_SUPABASE_URL=${config.NEXT_PUBLIC_SUPABASE_URL}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${config.NEXT_PUBLIC_SUPABASE_ANON_KEY}

# OpenAI Configuration (Required for AI features)  
OPENAI_API_KEY=${config.OPENAI_API_KEY}

# App Configuration
NEXT_PUBLIC_APP_URL=${config.NEXT_PUBLIC_APP_URL}
NODE_ENV=${config.NODE_ENV}

# Optional: Error Monitoring (uncomment and configure if needed)
# SENTRY_DSN=your_sentry_dsn
# NEXT_PUBLIC_SENTRY_DSN=your_sentry_dsn

# Optional: Analytics (uncomment and configure if needed)
# NEXT_PUBLIC_GA_ID=your_google_analytics_id
`;

  // Write the file
  try {
    fs.writeFileSync(envPath, envContent);
    log('\n✅ .env.local file created successfully!', 'green');

    // Check configuration status
    const isSupabaseConfigured =
      config.NEXT_PUBLIC_SUPABASE_URL !== 'your_supabase_project_url' &&
      config.NEXT_PUBLIC_SUPABASE_ANON_KEY !== 'your_supabase_anon_key';
    const isOpenAIConfigured = config.OPENAI_API_KEY !== 'your_openai_api_key';

    log('\n📊 CONFIGURATION STATUS:', 'bold');
    log(
      `Database & Auth: ${isSupabaseConfigured ? '✅ Configured' : '❌ Not configured'}`,
      isSupabaseConfigured ? 'green' : 'red'
    );
    log(
      `AI Features: ${isOpenAIConfigured ? '✅ Configured' : '❌ Not configured'}`,
      isOpenAIConfigured ? 'green' : 'red'
    );

    if (!isSupabaseConfigured || !isOpenAIConfigured) {
      log('\n⚠️  Some features are not configured:', 'yellow');
      if (!isSupabaseConfigured) {
        log(
          '   • Set up Supabase for authentication and data storage',
          'yellow'
        );
      }
      if (!isOpenAIConfigured) {
        log('   • Set up OpenAI for AI-powered features', 'yellow');
      }
      log(
        '\nYou can edit .env.local manually or run this script again.',
        'yellow'
      );
      log('The app will work in demo mode until fully configured.', 'yellow');
    }

    log('\n🚀 NEXT STEPS:', 'bold');
    log('1. Restart your development server: npm run dev');
    log('2. Open http://localhost:3000');
    log('3. Check the setup page: http://localhost:3000/setup');
  } catch (error) {
    log(`\n❌ Error creating .env.local file: ${error.message}`, 'red');
  }

  rl.close();
}

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
  log('\n\nSetup cancelled by user.', 'yellow');
  rl.close();
  process.exit(0);
});

main().catch(error => {
  log(`\n❌ Setup failed: ${error.message}`, 'red');
  rl.close();
  process.exit(1);
});
